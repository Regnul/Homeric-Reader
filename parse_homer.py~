from bs4 import BeautifulSoup

# Turn the XML file into a readable string

def text_reader():
   
    infile = open("hom.il_gk.xml", "r")
    contents = infile.read()
    soup = BeautifulSoup(contents, features='xml')
    body = soup.find('text')

    all_text = body.get_text()
    
    return all_text

# render the string of Perseus Hopper Beta Code as polytonic greek
# Vowels and aspirates carry more information and get the main table

vowel_combinations = { 
        'a)':'\u1F00', 
        'a(' : '\u1F01', 
        'a)\\' : '\u1F02', 
        'a(\\' : '\u1F03', 
        'a)/' : '\u1F04',
        'a(/' : '\u1F05',
        'a)=' : '\u1F06',
        'a(=' : '\u1F07',
        'a\\' : '\u1F70',
        'a)|' : '\u1F80',
        'a/' : '\u1F71',
        'a(|' : '\u1F81',
        'a)\\|' : '\u1F82',
        'a(\\|' : '\u1F83',
        'a)/|' : '\u1F84',
        'a(/|' : '\u1F85',
        'a)=|' : '\u1F86',
        'a(=|' : '\u1F87',
        'a\\|' : '\u1FB2',
        'a|' : '\u1FB3',
        'a/|' : '\u1FB4',
        'a=' : '\u1FB6',
        'a=|' : '\u1FB7',
        'e)' : '\u1F10',
        'e(' : '\u1F11',
        'e)\\' : '\u1F12',
        'e(\\' : '\u1F13',
        'e)/' : '\u1F14',
        'e(/' : '\u1F15',
        'e\\' : '\u1F72',
        'e/' : '\u1F73',
        'h)' : '\u1F20',
        'h(' : '\u1F21',
        'h)\\' : '\u1F22',
        'h(\\' : '\u1F23',
        'h)/' : '\u1F24',
        'h(/' : '\u1F25',
        'h)=' : '\u1F26',
        'h(=' : '\u1F27',
        'h\\|' : '\u1FC2',
        'h|' : '\u1FC3',
        'h/|' : '\u1FC4',
        'h=' : '\u1FC6',
        'h=|' : '\u1FC7',
        'h(|' : '\u1F91',
        'h)\\|' : '\u1F92',
        'h(\\|' : '\u1F93',
        'h)/|' : '\u1F94',
        'h(/|' : '\u1F95',
        'h)=|' : '\u1F96',
        'h(=|' : '\u1F97',
        'h\\' : '\u1F74',
        'h/' : '\u1F75',
        'h)|' : '\u1F90',
        'i)' : '\u1F30',
        'i(' : '\u1F31',
        'i)\\' : '\u1F32',
        'i(\\' : '\u1F33',
        'i)/' : '\u1F34',
        'i(/' : '\u1F35',
        'i)=' : '\u1F36',
        'i(=' : '\u1F37',
        'i=' : '\u1FD6',
        'i\\' : '\u1F76',
        'i/' : '\u1F77',
        'o)' : '\u1F40',
        'o(' : '\u1F41',
        'o)\\' : '\u1F42',
        'o(\\' : '\u1F43',
        'o)/' : '\u1F44',
        'o(/' : '\u1F45',
        'o\\' : '\u1F78',
        'o/' : '\u1F79',
        'u\\' : '\u1F7A',
        'u/' : '\u1F7B',
        'u)' : '\u1F50',
        'u(' : '\u1F51',
        'u)\\' : '\u1F52',
        'u(\\' : '\u1F53',
        'u)/' : '\u1F54',
        'u(/' : '\u1F55',
        'u)=': '\u1F56',
        'u(=' : '\u1F57',
        'u=' : '\u1FE6',
        'w)' : '\u1F60',
        'w(' : '\u1F61',
        'w)\\' : '\u1F62',
        'w(\\' : '\u1F63',
        'w)/' : '\u1F64',
        'w(/' : '\u1F65',
        'w)=' : '\u1F66',
        'w(=' : '\u1F67',
        'w)|' : '\u1FA0',
        'w(|' : '\u1FA1',
        'w)\\|' : '\u1FA2',
        'w(\\|' : '\u1FA3',
        'w)/|' : '\u1FA4',
        'w(/|' : '\u1FA5',
        'w)=|' : '\u1FA6',
        'w(=|' : '\u1FA7',
        'w\\|' : '\u1FF2',
        'w|' : '\u1FF3',
        'w/|' : '\u1FF4',
        'w=' : '\u1FF6',
        'w=|' : '\u1FF7',
        'w\\' : '\u1F7C',
        'w/' : '\u1F7D',
        'r)' : '\u1FE4',
        'r(' : '\u1FE5',
        'r' : '\u03C1',
        'i\\+' : '\u1FD2',
        'i/+' : '\u1FD3',
        'i=+' : '\u1FD7',
        'u\\+' : '\u1FE2',
        'u/+' : '\u1FE3',
        'u=+' : '\u1FE7',
        '*)a' : '\u1F08',
        '*(a' : '\u1F09',
        '*)\\a' : '\u1F0A',
        '*(\\a' : '\u1F0B',
        '*)/a' : '\u1F0C',
        '*(/a' : '\u1F0D',
        '*)=a' : '\u1F0E',
        '*(=a' : '\u1F0F',
        '*\\a' : '\u1FBA',
        '*/a' : '\u1FBB',
        '*|a' : '\u1FBC',
        '*)|a' : '\u1F88',
        '*(|a' : '\u1F89',
        '*)\\|a' : '\u1F8A',
        '*(\\|a' : '\u1F8B',
        '*)/|a' : '\u1F8C',
        '*(/|a' : '\u1F8D',
        '*)=|a' : '\u1F8E',
        '*(=|a' : '\u1F8F',
        '*\\a' : '\u1FBA',
        '*/a' : '\u1FBB',
        '*|a' : '\u1FBC',
        '*)e' : '\u1F18',
        '*(e' : '\u1F19',
        '*)\\e' : '\u1F1A',
        '*(\\e' : '\u1F1B',
        '*)/e' : '\u1F1C',
        '*(/e' : '\u1F1D',
        '*\\e' : '\u1FC8',
        '*/e' : '\u1FC9',
        '*)h' : '\u1F28',
        '*(h' : '\u1F29',
        '*)\\h' : '\u1F2A',
        '*(\\h' : '\u1F2B',
        '*)/h' : '\u1F2C',
        '*(/h' : '\u1F2D',
        '*)=h' : '\u1F2E',
        '*(=h' : '\u1F2F',
        '*)|h' : '\u1F98',
        '*(|h' : '\u1F99',
        '*)\\|h' : '\u1F9A',
        '*(\\|h' : '\u1F9B',
        '*)/|h' : '\u1F9C',
        '*(/|h' : '\u1F9D',
        '*)=|h' : '\u1F9E',
        '*(=|h' : '\u1F9F',
        '*\\h' : '\u1FCA',
        '*/h' : '\u1FCB',
        '*h|' : '\u1FCC',
        '*)i' : '\u1F38',
        '*(i' : '\u1F39', 
        '*)\\i' : '\u1F3A',
        '*(\\i' : '\u1F3B',
        '*)/i' : '\u1F3C',
        '*(/i' : '\u1F3D',
        '*)=i' : '\u1F3E',
        '*(=i' : '\u1F3F',
        '*\\i' : '\u1FDA',
        '*/i' : '\u1FDB',
        '*)o' : '\u1F48',
        '*(o' : '\u1F49',
        '*)\\o' : '\u1F4A',
        '*(\\o' : '\u1F4B',
        '*)/o' : '\u1F4C',
        '*(/o' : '\u1F4D',
        '*\\o' : '\u1FF8',
        '*/o' : '\u1FF9',
        '*(u' : '\u1F59',
        '*(\\u' : '\u1F5B',
        '*(/u' : '\u1F5D',
        '*(=u' : '\u1F5F',
        '*\\u' : '\u1FEA',
        '*/u' : '\u1FEB',
        '*)w' : '\u1F68',
        '*(w' : '\u1F69',
        '*)\\w' : '\u1F6A',
        '*(\\w' : '\u1F6B',
        '*)/w' : '\u1F6C',
        '*(/w' : '\u1F6D',
        '*)=w' : '\u1F6E', 
        '*(=w' : '\u1F6F',
        '*)|w' : '\u1FA8',
        '*(|w' : '\u1FA9',
        '*)\\|w' : '\u1FAA',
        '*(\\|w' : '\u1FAB',
        '*)/|w' : '\u1FAC',
        '*(/|w' : '\u1FAD',
        '*)=|w' : '\u1FAE',
        '*(=|w' : '\u1FAF',
        '*\\w' : '\u1FFA',
        '*/w' : '\u1FFB',
        '*|w' : '\u1FFC',
        '*(r' : '\u1FEC',
        '*r' : '\u03A1',
        'a' : '\u03B1',
        'e' : '\u03B5',
        'h' : '\u03B7',
        'i' : '\u03B9',
        'o' : '\u03BF',
        'u' : '\u03C5',
        'w' : '\u03C9',
        'i+' : '\u03CA',
        '*i+' : '\u03AA'
        }

consonants = {
        'b' : '\u03B2',
        'g' : '\u03B3',
        'd' : '\u03B4',
        'z' : '\u03B6',
        'q' : '\u03B8',
        'k' : '\u03BA',
        'l' : '\u03BB',
        'm' : '\u03BC',
        'n' : '\u03BD',
        'c' : '\u03BE',
        'p' : '\u03C0',
        't' : '\u03C4',
        'f' : '\u03C6',
        'x' : '\u03C7',
        'y' : '\u03C8',
        '*b' : '\u0392',
        '*g' : '\u0393',
        '*d' : '\u0394',
        '*z' : '\u0396',
        '*q' : '\u0398',
        '*k' : '\u039A',
        '*l' : '\u039B',
        '*m' : '\u039C',
        '*n' : '\u039D',
        '*c' : '\u039E',
        '*p' : '\u03A0',
        '*s' : '\u03A3',
        '*t' : '\u03A4',
        '*f' : '\u03A6',
        '*x' : '\u03A7',
        '*y' : '\u03A8',
        }

# handles the difference in terminal sigmas and intraword sigmas

sigma_exception = {
        's ' : '\u03C2 ',
        's\n' : '\u03C2 \n',
        's.' : '\u03C2',
        's' : '\u03C3',
        } 


def swapper(all_text):

    relational_tables = [consonants, vowel_combinations, sigma_exception]
    
    unused_characters = []

    for array in relational_tables:
        # running keys by reverse length anticipates stranded betacode
        for key in sorted(array, key=len, reverse=True): 
            if key in all_text:
                all_text = all_text.replace(key, array[key])
            else:
                # print(f'boooo {key} not here')
                unused_characters.append(key)
    
    return all_text
 



